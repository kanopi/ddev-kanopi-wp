name: ddev-kanopi-wp

# Based on https://github.com/ddev/ddev/blob/HEAD/pkg/ddevapp/addons.go#L61
project_files:
- commands/
- config/
- scripts/

# DDEV version constraint
ddev_version_constraint: ">= v1.22.0"

# Pre-install actions
pre_install_actions:
# Introduction
- |
  #ddev-description:Configuring Kanopi WordPress Add-on
  echo ""
  echo "üîß Configuring Kanopi WordPress Add-on..."
  echo ""

# Platform selection - check if exists
- |
  #ddev-nodisplay
  if ({{ contains "HOSTING_PROVIDER=" (list .DdevProjectConfig.web_environment | toString) }} ); then
    echo "Using existing HOSTING_PROVIDER from project config.yaml."
  else
    printf "üåê Select your hosting platform (pantheon/wpengine/kinsta): "
  fi

# Platform selection - set value
- |
  #ddev-nodisplay
  #ddev-description:Set HOSTING_PROVIDER
  if !( {{ contains "HOSTING_PROVIDER=" (list .DdevProjectConfig.web_environment | toString) }} ); then
    # Check if running in CI environment
    if [ "${CI:-}" = "true" ] || [ "${GITHUB_ACTIONS:-}" = "true" ] || [ "${DDEV_NONINTERACTIVE:-}" = "true" ]; then
      HOSTING_PROVIDER="pantheon"
      echo "CI environment detected, using test platform: $HOSTING_PROVIDER"
    else
      read HOSTING_PROVIDER
      if [ -z "$HOSTING_PROVIDER" ]; then
        HOSTING_PROVIDER="pantheon"
        echo "‚ö†Ô∏è  Using default platform: $HOSTING_PROVIDER"
      fi
      # Validate platform choice
      if [[ "$HOSTING_PROVIDER" != "pantheon" && "$HOSTING_PROVIDER" != "wpengine" && "$HOSTING_PROVIDER" != "kinsta" ]]; then
        echo "‚ùå Invalid platform. Please choose 'pantheon', 'wpengine', or 'kinsta'"
        exit 1
      fi
    fi
    echo "HOSTING_PROVIDER = '${HOSTING_PROVIDER}'"
    ddev config --web-environment-add HOSTING_PROVIDER=${HOSTING_PROVIDER}
    echo "HOSTING_PROVIDER set to ${HOSTING_PROVIDER}"
    
    # Platform-specific configuration
    if [[ "$HOSTING_PROVIDER" == "pantheon" ]]; then
      # Pantheon uses 'web' as docroot
      ddev config --docroot=web
      echo "‚úÖ Configured docroot for Pantheon (web)"
    elif [[ "$HOSTING_PROVIDER" == "wpengine" ]]; then
      # WPEngine uses 'wp' as docroot
      ddev config --docroot=wp
      echo "‚úÖ Configured docroot for WPEngine (wp)"
    elif [[ "$HOSTING_PROVIDER" == "kinsta" ]]; then
      # Kinsta uses 'public' as docroot
      ddev config --docroot=public
      echo "‚úÖ Configured docroot for Kinsta (public)"
    fi
  fi

# Platform-specific credentials configuration
- |
  #ddev-nodisplay
  #ddev-description:Configure platform credentials
  # Get current hosting provider
  CURRENT_PROVIDER=""
  if ( {{ contains "HOSTING_PROVIDER=" (list .DdevProjectConfig.web_environment | toString) }} ); then
    CURRENT_PROVIDER=$(ddev exec printenv HOSTING_PROVIDER 2>/dev/null || echo "pantheon")
  fi
  
  if [[ "$CURRENT_PROVIDER" == "pantheon" ]]; then
    # Pantheon - check for TERMINUS_MACHINE_TOKEN
    if ( {{ contains "TERMINUS_MACHINE_TOKEN" (list .DdevGlobalConfig.web_environment | toString) }} || {{ contains "TERMINUS_MACHINE_TOKEN" (list .DdevProjectConfig.web_environment | toString) }} ); then
      echo "Using existing TERMINUS_MACHINE_TOKEN."
    else
      printf "\n\nüèõÔ∏è  Please enter your Pantheon Terminus machine token: "
      read token
      # Put the token into the global web environment
      ddev config global --web-environment-add TERMINUS_MACHINE_TOKEN=${token}
      echo "TERMINUS_MACHINE_TOKEN set globally"
    fi
  elif [[ "$CURRENT_PROVIDER" == "wpengine" ]]; then
    # WPEngine - check for WPE credentials
    if ( {{ contains "WPE_API_USERNAME" (list .DdevGlobalConfig.web_environment | toString) }} || {{ contains "WPE_API_USERNAME" (list .DdevProjectConfig.web_environment | toString) }} ); then
      echo "Using existing WPE_API_USERNAME."
    else
      printf "\n\n‚ö° Please enter your WPEngine API Username: "
      read wpe_username
      ddev config global --web-environment-add WPE_API_USERNAME=${wpe_username}
      echo "WPE_API_USERNAME set globally"
    fi
    
    if ( {{ contains "WPE_API_PASSWORD" (list .DdevGlobalConfig.web_environment | toString) }} || {{ contains "WPE_API_PASSWORD" (list .DdevProjectConfig.web_environment | toString) }} ); then
      echo "Using existing WPE_API_PASSWORD."
    else
      printf "üîê Please enter your WPEngine API Password: "
      read wpe_password
      ddev config global --web-environment-add WPE_API_PASSWORD=${wpe_password}
      echo "WPE_API_PASSWORD set globally"
    fi
  elif [[ "$CURRENT_PROVIDER" == "kinsta" ]]; then
    # Kinsta - check for API key
    if ( {{ contains "KINSTA_API_KEY" (list .DdevGlobalConfig.web_environment | toString) }} || {{ contains "KINSTA_API_KEY" (list .DdevProjectConfig.web_environment | toString) }} ); then
      echo "Using existing KINSTA_API_KEY."
    else
      printf "\n\nüî∑ Please enter your Kinsta API Key: "
      read kinsta_key
      ddev config global --web-environment-add KINSTA_API_KEY=${kinsta_key}
      echo "KINSTA_API_KEY set globally"
    fi
  fi

# THEME configuration - check if exists
- |
  #ddev-nodisplay
  if ({{ contains "THEME=" (list .DdevProjectConfig.web_environment | toString) }} ); then
    echo "Using existing THEME from project config.yaml."
  else
    printf "üìÅ Enter the path to your active WordPress theme (like 'wp-content/themes/custom/mytheme'): "
  fi

# THEME configuration - set value
- |
  #ddev-nodisplay
  #ddev-description:Set THEME
  if !( {{ contains "THEME=" (list .DdevProjectConfig.web_environment | toString) }} ); then
    # Check if running in CI environment
    if [ "${CI:-}" = "true" ] || [ "${GITHUB_ACTIONS:-}" = "true" ] || [ "${DDEV_NONINTERACTIVE:-}" = "true" ]; then
      THEME_PATH="wp-content/themes/custom/testtheme"
      echo "CI environment detected, using test theme path: $THEME_PATH"
    else
      read THEME_PATH
      if [ -z "$THEME_PATH" ]; then
        THEME_PATH="wp-content/themes/custom/struts"
        echo "‚ö†Ô∏è  Using default theme path: $THEME_PATH"
      fi
    fi
    echo "THEME = '${THEME_PATH}'"
    ddev config --web-environment-add THEME=${THEME_PATH}
    echo "THEME set to ${THEME_PATH}"
  fi

# THEMENAME configuration - check if exists
- |
  #ddev-nodisplay
  if ({{ contains "THEMENAME=" (list .DdevProjectConfig.web_environment | toString) }} ); then
    echo "Using existing THEMENAME from project config.yaml."
  else
    printf "üé® Enter your theme name (like 'mytheme'): "
  fi

# THEMENAME configuration - set value
- |
  #ddev-nodisplay
  #ddev-description:Set THEMENAME
  if !( {{ contains "THEMENAME=" (list .DdevProjectConfig.web_environment | toString) }} ); then
    # Check if running in CI environment
    if [ "${CI:-}" = "true" ] || [ "${GITHUB_ACTIONS:-}" = "true" ] || [ "${DDEV_NONINTERACTIVE:-}" = "true" ]; then
      THEME_NAME="testtheme"
      echo "CI environment detected, using test theme name: $THEME_NAME"
    else
      read THEME_NAME
      if [ -z "$THEME_NAME" ]; then
        THEME_NAME="struts"
        echo "‚ö†Ô∏è  Using default theme name: $THEME_NAME"
      fi
    fi
    echo "THEMENAME = '${THEME_NAME}'"
    ddev config --web-environment-add THEMENAME=${THEME_NAME}
    echo "THEMENAME set to ${THEME_NAME}"
  fi

# HOSTING_SITE configuration - check if exists
- |
  #ddev-nodisplay
  if ({{ contains "HOSTING_SITE=" (list .DdevProjectConfig.web_environment | toString) }} ); then
    echo "Using existing HOSTING_SITE from project config.yaml."
  else
    # Get current hosting provider
    CURRENT_PROVIDER=$(ddev exec printenv HOSTING_PROVIDER 2>/dev/null || echo "pantheon")
    if [[ "$CURRENT_PROVIDER" == "pantheon" ]]; then
      printf "üèõÔ∏è  Enter your Pantheon project machine name (like 'my-site'): "
    elif [[ "$CURRENT_PROVIDER" == "wpengine" ]]; then
      printf "‚ö° Enter your WPEngine install name (like 'my-site'): "
    elif [[ "$CURRENT_PROVIDER" == "kinsta" ]]; then
      printf "üî∑ Enter your Kinsta site name (like 'my-site'): "
    fi
  fi

# HOSTING_SITE configuration - set value
- |
  #ddev-nodisplay
  #ddev-description:Set HOSTING_SITE
  if !( {{ contains "HOSTING_SITE=" (list .DdevProjectConfig.web_environment | toString) }} ); then
    # Check if running in CI environment
    if [ "${CI:-}" = "true" ] || [ "${GITHUB_ACTIONS:-}" = "true" ] || [ "${DDEV_NONINTERACTIVE:-}" = "true" ]; then
      HOSTING_SITE="test-site-123"
      echo "CI environment detected, using test site: $HOSTING_SITE"
    else
      read HOSTING_SITE
      if [ -z "$HOSTING_SITE" ]; then
        echo "‚ùå HOSTING_SITE is required for proper functionality"
        exit 1
      fi
    fi
    echo "HOSTING_SITE = '${HOSTING_SITE}'"
    ddev config --web-environment-add HOSTING_SITE=${HOSTING_SITE}
    echo "HOSTING_SITE set to ${HOSTING_SITE}"
  fi

# HOSTING_ENV configuration - check if exists
- |
  #ddev-nodisplay
  if ({{ contains "HOSTING_ENV=" (list .DdevProjectConfig.web_environment | toString) }} ); then
    echo "Using existing HOSTING_ENV from project config.yaml."
  else
    # Get current hosting provider
    CURRENT_PROVIDER=$(ddev exec printenv HOSTING_PROVIDER 2>/dev/null || echo "pantheon")
    if [[ "$CURRENT_PROVIDER" == "pantheon" ]]; then
      printf "üåç Enter default Pantheon environment for database pulls (dev/test/live) [dev]: "
    elif [[ "$CURRENT_PROVIDER" == "wpengine" ]]; then
      printf "üåç Enter default WPEngine environment for database pulls (development/staging/production) [development]: "
    elif [[ "$CURRENT_PROVIDER" == "kinsta" ]]; then
      printf "üåç Enter default Kinsta environment for database pulls (staging/live) [staging]: "
    fi
  fi

# HOSTING_ENV configuration - set value
- |
  #ddev-nodisplay
  #ddev-description:Set HOSTING_ENV
  if !( {{ contains "HOSTING_ENV=" (list .DdevProjectConfig.web_environment | toString) }} ); then
    # Check if running in CI environment
    if [ "${CI:-}" = "true" ] || [ "${GITHUB_ACTIONS:-}" = "true" ] || [ "${DDEV_NONINTERACTIVE:-}" = "true" ]; then
      HOSTING_ENV="dev"
      echo "CI environment detected, using default environment: $HOSTING_ENV"
    else
      read HOSTING_ENV
      if [ -z "$HOSTING_ENV" ]; then
        # Provider-specific defaults
        CURRENT_PROVIDER=$(ddev exec printenv HOSTING_PROVIDER 2>/dev/null || echo "pantheon")
        if [[ "$CURRENT_PROVIDER" == "wpengine" ]]; then
          HOSTING_ENV="development"
        elif [[ "$CURRENT_PROVIDER" == "kinsta" ]]; then
          HOSTING_ENV="staging"
        else
          HOSTING_ENV="dev"
        fi
        echo "‚ö†Ô∏è  Using default environment: $HOSTING_ENV"
      fi
    fi
    echo "HOSTING_ENV = '${HOSTING_ENV}'"
    ddev config --web-environment-add HOSTING_ENV=${HOSTING_ENV}
    echo "HOSTING_ENV set to ${HOSTING_ENV}"
  fi

# Optional Migration Configuration intro
- |
  #ddev-nodisplay
  echo ""
  echo "Optional Migration Configuration:"
  echo "Press Enter to skip if you don't need migration support"
  echo ""

# MIGRATE_DB_SOURCE configuration - check if exists
- |
  #ddev-nodisplay
  if ({{ contains "MIGRATE_DB_SOURCE=" (list .DdevProjectConfig.web_environment | toString) }} ); then
    echo "Using existing MIGRATE_DB_SOURCE from project config.yaml."
  else
    CURRENT_PROVIDER=$(ddev exec printenv HOSTING_PROVIDER 2>/dev/null || echo "pantheon")
    if [[ "$CURRENT_PROVIDER" == "pantheon" ]]; then
      printf "üì¶ Enter migration source Pantheon project name (optional): "
    elif [[ "$CURRENT_PROVIDER" == "wpengine" ]]; then
      printf "üì¶ Enter migration source WPEngine install name (optional): "
    elif [[ "$CURRENT_PROVIDER" == "kinsta" ]]; then
      printf "üì¶ Enter migration source Kinsta site name (optional): "
    fi
  fi

# MIGRATE_DB_SOURCE configuration - set value
- |
  #ddev-nodisplay
  #ddev-description:Set MIGRATE_DB_SOURCE
  if !( {{ contains "MIGRATE_DB_SOURCE=" (list .DdevProjectConfig.web_environment | toString) }} ); then
    # Check if running in CI environment
    if [ "${CI:-}" = "true" ] || [ "${GITHUB_ACTIONS:-}" = "true" ] || [ "${DDEV_NONINTERACTIVE:-}" = "true" ]; then
      MIGRATE_SOURCE="test-migration-source"
      echo "CI environment detected, using test migration source: $MIGRATE_SOURCE"
      echo "MIGRATE_DB_SOURCE = '${MIGRATE_SOURCE}'"
      ddev config --web-environment-add MIGRATE_DB_SOURCE=${MIGRATE_SOURCE}
      echo "MIGRATE_DB_SOURCE set to ${MIGRATE_SOURCE}"
    else
      read MIGRATE_SOURCE
      if [ -n "$MIGRATE_SOURCE" ]; then
        echo "MIGRATE_DB_SOURCE = '${MIGRATE_SOURCE}'"
        ddev config --web-environment-add MIGRATE_DB_SOURCE=${MIGRATE_SOURCE}
        echo "MIGRATE_DB_SOURCE set to ${MIGRATE_SOURCE}"
      fi
    fi
  fi

# MIGRATE_DB_ENV configuration - check if exists
- |
  #ddev-nodisplay
  if ({{ contains "MIGRATE_DB_ENV=" (list .DdevProjectConfig.web_environment | toString) }} ); then
    echo "Using existing MIGRATE_DB_ENV from project config.yaml."
  else
    CURRENT_PROVIDER=$(ddev exec printenv HOSTING_PROVIDER 2>/dev/null || echo "pantheon")
    if [[ "$CURRENT_PROVIDER" == "pantheon" ]]; then
      printf "üåç Enter migration source environment (dev/test/live) (optional): "
    elif [[ "$CURRENT_PROVIDER" == "wpengine" ]]; then
      printf "üåç Enter migration source environment (development/staging/production) (optional): "
    elif [[ "$CURRENT_PROVIDER" == "kinsta" ]]; then
      printf "üåç Enter migration source environment (staging/live) (optional): "
    fi
  fi

# MIGRATE_DB_ENV configuration - set value
- |
  #ddev-nodisplay
  #ddev-description:Set MIGRATE_DB_ENV
  if !( {{ contains "MIGRATE_DB_ENV=" (list .DdevProjectConfig.web_environment | toString) }} ); then
    # Check if running in CI environment
    if [ "${CI:-}" = "true" ] || [ "${GITHUB_ACTIONS:-}" = "true" ] || [ "${DDEV_NONINTERACTIVE:-}" = "true" ]; then
      MIGRATE_ENV="live"
      echo "CI environment detected, using test migration environment: $MIGRATE_ENV"
      echo "MIGRATE_DB_ENV = '${MIGRATE_ENV}'"
      ddev config --web-environment-add MIGRATE_DB_ENV=${MIGRATE_ENV}
      echo "MIGRATE_DB_ENV set to ${MIGRATE_ENV}"
    else
      read MIGRATE_ENV
      if [ -n "$MIGRATE_ENV" ]; then
        echo "MIGRATE_DB_ENV = '${MIGRATE_ENV}'"
        ddev config --web-environment-add MIGRATE_DB_ENV=${MIGRATE_ENV}
        echo "MIGRATE_DB_ENV set to ${MIGRATE_ENV}"
      fi
    fi
  fi

# WordPress Admin User configuration intro
- |
  #ddev-nodisplay
  echo ""
  echo "WordPress Admin Configuration:"
  echo "Configure the admin user credentials for your WordPress site"
  echo ""

# WP_ADMIN_USER configuration - check if exists
- |
  #ddev-nodisplay
  if ({{ contains "WP_ADMIN_USER=" (list .DdevProjectConfig.web_environment | toString) }} ); then
    echo "Using existing WP_ADMIN_USER from project config.yaml."
  else
    printf "üë§ Enter WordPress admin username [admin]: "
  fi

# WP_ADMIN_USER configuration - set value
- |
  #ddev-nodisplay
  #ddev-description:Set WP_ADMIN_USER
  if !( {{ contains "WP_ADMIN_USER=" (list .DdevProjectConfig.web_environment | toString) }} ); then
    # Check if running in CI environment
    if [ "${CI:-}" = "true" ] || [ "${GITHUB_ACTIONS:-}" = "true" ] || [ "${DDEV_NONINTERACTIVE:-}" = "true" ]; then
      WP_ADMIN_USER="admin"
      echo "CI environment detected, using default admin user: $WP_ADMIN_USER"
    else
      read WP_ADMIN_USER
      if [ -z "$WP_ADMIN_USER" ]; then
        WP_ADMIN_USER="admin"
        echo "‚ö†Ô∏è  Using default admin user: $WP_ADMIN_USER"
      fi
    fi
    echo "WP_ADMIN_USER = '${WP_ADMIN_USER}'"
    ddev config --web-environment-add WP_ADMIN_USER=${WP_ADMIN_USER}
    echo "WP_ADMIN_USER set to ${WP_ADMIN_USER}"
  fi

# WP_ADMIN_PASS configuration - check if exists
- |
  #ddev-nodisplay
  if ({{ contains "WP_ADMIN_PASS=" (list .DdevProjectConfig.web_environment | toString) }} ); then
    echo "Using existing WP_ADMIN_PASS from project config.yaml."
  else
    printf "üîê Enter WordPress admin password [admin]: "
  fi

# WP_ADMIN_PASS configuration - set value
- |
  #ddev-nodisplay
  #ddev-description:Set WP_ADMIN_PASS
  if !( {{ contains "WP_ADMIN_PASS=" (list .DdevProjectConfig.web_environment | toString) }} ); then
    # Check if running in CI environment
    if [ "${CI:-}" = "true" ] || [ "${GITHUB_ACTIONS:-}" = "true" ] || [ "${DDEV_NONINTERACTIVE:-}" = "true" ]; then
      WP_ADMIN_PASS="admin"
      echo "CI environment detected, using default admin password: $WP_ADMIN_PASS"
    else
      read WP_ADMIN_PASS
      if [ -z "$WP_ADMIN_PASS" ]; then
        WP_ADMIN_PASS="admin"
        echo "‚ö†Ô∏è  Using default admin password: $WP_ADMIN_PASS"
      fi
    fi
    echo "WP_ADMIN_PASS = '${WP_ADMIN_PASS}'"
    ddev config --web-environment-add WP_ADMIN_PASS=${WP_ADMIN_PASS}
    echo "WP_ADMIN_PASS set to ${WP_ADMIN_PASS}"
  fi

# WP_ADMIN_EMAIL configuration - check if exists
- |
  #ddev-nodisplay
  if ({{ contains "WP_ADMIN_EMAIL=" (list .DdevProjectConfig.web_environment | toString) }} ); then
    echo "Using existing WP_ADMIN_EMAIL from project config.yaml."
  else
    printf "üìß Enter WordPress admin email [admin@example.com]: "
  fi

# WP_ADMIN_EMAIL configuration - set value
- |
  #ddev-nodisplay
  #ddev-description:Set WP_ADMIN_EMAIL
  if !( {{ contains "WP_ADMIN_EMAIL=" (list .DdevProjectConfig.web_environment | toString) }} ); then
    # Check if running in CI environment
    if [ "${CI:-}" = "true" ] || [ "${GITHUB_ACTIONS:-}" = "true" ] || [ "${DDEV_NONINTERACTIVE:-}" = "true" ]; then
      WP_ADMIN_EMAIL="admin@example.com"
      echo "CI environment detected, using default admin email: $WP_ADMIN_EMAIL"
    else
      read WP_ADMIN_EMAIL
      if [ -z "$WP_ADMIN_EMAIL" ]; then
        WP_ADMIN_EMAIL="admin@example.com"
        echo "‚ö†Ô∏è  Using default admin email: $WP_ADMIN_EMAIL"
      fi
    fi
    echo "WP_ADMIN_EMAIL = '${WP_ADMIN_EMAIL}'"
    ddev config --web-environment-add WP_ADMIN_EMAIL=${WP_ADMIN_EMAIL}
    echo "WP_ADMIN_EMAIL set to ${WP_ADMIN_EMAIL}"
  fi

# Configuration complete
- |
  #ddev-nodisplay
  #ddev-description:Configuration complete
  echo ""
  echo "‚úÖ Configuration collected successfully"
  echo ""

# Post-install actions
post_install_actions:
# Apply additional configuration and detect hosting platform settings
- |
  #ddev-nodisplay
  #ddev-description: Installing Redis add-on. This may take a moment as Docker images are downloaded.
  echo ""  

- |
  #ddev-nodisplay
  #ddev-description: Update Nginx proxy configuration with hosting platform values
  echo "üîß Updating Nginx proxy configuration..."
  
  # Get the environment variables from the config file
  HOSTING_PROVIDER_VALUE=$(grep "HOSTING_PROVIDER=" ./config.yaml | sed 's/.*HOSTING_PROVIDER=\([^,]*\).*/\1/' | tr -d '"' || echo "pantheon")
  HOSTING_SITE_VALUE=$(grep "HOSTING_SITE=" ./config.yaml | sed 's/.*HOSTING_SITE=\([^,]*\).*/\1/' | tr -d '"' || echo "")
  HOSTING_ENV_VALUE=$(grep "HOSTING_ENV=" ./config.yaml | sed 's/.*HOSTING_ENV=\([^,]*\).*/\1/' | tr -d '"' || echo "")
  
  if [ -n "$HOSTING_SITE_VALUE" ] && [ -n "$HOSTING_ENV_VALUE" ]; then
    # Platform-specific proxy configuration
    if [[ "$HOSTING_PROVIDER_VALUE" == "pantheon" ]]; then
      # Replace the placeholder in nginx config with Pantheon values
      sed -i.bak "s/HOSTING_ENV-HOSTING_SITE/$HOSTING_ENV_VALUE-$HOSTING_SITE_VALUE/g" ./config/nginx/nginx-site.conf
      sed -i.bak "s/HOSTING_DOMAIN/pantheonsite.io/g" ./config/nginx/nginx-site.conf
      echo "‚úÖ Updated nginx proxy to redirect to: $HOSTING_ENV_VALUE-$HOSTING_SITE_VALUE.pantheonsite.io"
    elif [[ "$HOSTING_PROVIDER_VALUE" == "wpengine" ]]; then
      # WPEngine uses install-name.wpengine.com format
      sed -i.bak "s/HOSTING_ENV-HOSTING_SITE/$HOSTING_SITE_VALUE/g" ./config/nginx/nginx-site.conf
      sed -i.bak "s/HOSTING_DOMAIN/wpengine.com/g" ./config/nginx/nginx-site.conf
      echo "‚úÖ Updated nginx proxy to redirect to: $HOSTING_SITE_VALUE.wpengine.com"
    elif [[ "$HOSTING_PROVIDER_VALUE" == "kinsta" ]]; then
      # Kinsta uses custom domains, typically site-name.kinsta.cloud
      sed -i.bak "s/HOSTING_ENV-HOSTING_SITE/$HOSTING_SITE_VALUE/g" ./config/nginx/nginx-site.conf
      sed -i.bak "s/HOSTING_DOMAIN/kinsta.cloud/g" ./config/nginx/nginx-site.conf
      echo "‚úÖ Updated nginx proxy to redirect to: $HOSTING_SITE_VALUE.kinsta.cloud"
    fi
  else
    echo "‚ö†Ô∏è  Could not retrieve HOSTING_SITE and HOSTING_ENV values from config for nginx configuration"
    echo "    HOSTING_PROVIDER_VALUE: '$HOSTING_PROVIDER_VALUE'"
    echo "    HOSTING_SITE_VALUE: '$HOSTING_SITE_VALUE'"
    echo "    HOSTING_ENV_VALUE: '$HOSTING_ENV_VALUE'"
  fi  

- |
  #ddev-description: Install required DDEV add-ons
  # Install Redis add-on for all configurations
  echo ""
  echo "üì¶ Installing Redis add-on..."
  ddev add-on get ddev/ddev-redis  
  echo ""
  echo "üì¶ Installing Solr add-on..."
  ddev add-on get ddev/ddev-solr
  echo ""
  echo "üì¶ Installing PhpMyAdmin add-on..."
  ddev add-on get ddev/ddev-phpmyadmin
  echo ""
  echo "Ignore DDEV add-on settings files"
  echo "settings.ddev.redis.php" >> ../.gitignore
  echo "settings.ddev.solr.php" >> ../.gitignore

- |
  #ddev-description: WordPress configuration setup
  echo ""
  echo "üì¶ WordPress configuration complete - all settings now use environment variables"
  
  # Add ddev-managed settings to wp-config.php
  if [ -f "../../web/wp-config.php" ]; then
    # Check if the ddev settings snippet is already present
    if ! grep -q "wp-config-ddev.php" "../../web/wp-config.php"; then
      # Create a temporary file with the new content
      {
        head -n 1 "../../web/wp-config.php"  # <?php line
        echo ""
        echo "// Added for ddev-managed settings in wp-config-ddev.php."
        echo "\$ddev_settings = dirname(__FILE__) . '/wp-config-ddev.php';"
        echo "if (is_readable(\$ddev_settings)) {"
        echo "  require_once(\$ddev_settings);"
        echo "}"
        echo ""
        tail -n +2 "../../web/wp-config.php"  # Rest of the file
      } > "../../web/wp-config.php.tmp"
      mv "../../web/wp-config.php.tmp" "../../web/wp-config.php"
      echo "üìù Added ddev-managed settings to wp-config.php"
    else
      echo "üìù ddev-managed settings already present in wp-config.php"
    fi
  else
    echo "‚ö†Ô∏è  wp-config.php not found at web/wp-config.php"
  fi

- |
  #ddev-description: Handle Pantheon mu-plugins compatibility
  # Disable Pantheon mu-plugins that conflict with DDEV environment
  echo ""
  echo "üîß Checking for Pantheon mu-plugins that need to be disabled in DDEV..."
  
  PANTHEON_LOADER="../../web/wp-content/mu-plugins/pantheon-mu-loader.php"
  if [ -f "$PANTHEON_LOADER" ]; then
    # Check if the loader tries to load pantheon-mu-plugin
    if grep -q "pantheon-mu-plugin/pantheon.php" "$PANTHEON_LOADER"; then
      # Check if the actual plugin directory exists
      if [ ! -d "../../web/wp-content/mu-plugins/pantheon-mu-plugin" ]; then
        echo "üìù Found Pantheon mu-plugin loader but plugin directory missing"
        echo "   Disabling to prevent PHP fatal errors in DDEV environment..."
        mv "$PANTHEON_LOADER" "${PANTHEON_LOADER}.disabled"
        echo "‚úÖ Pantheon mu-plugin loader disabled (renamed to .disabled)"
        echo "   This prevents 'Failed to open stream' errors when running WP-CLI commands"
      else
        echo "üìù Pantheon mu-plugin found and appears complete - leaving enabled"
      fi
    else
      echo "üìù Custom pantheon-mu-loader.php found - leaving as-is"
    fi
  else
    echo "üìù No Pantheon mu-plugin loader found - no action needed"
  fi

# Explain the installed components
- |
  echo ""
  echo "‚úÖ Kanopi WordPress Add-on installed successfully!"
  echo ""
  echo "üì¶ Installed components:"
  echo "   ‚Ä¢ Enhanced multi-provider hosting support (Pantheon, WPEngine, Kinsta)"
  echo "   ‚Ä¢ 20+ custom commands for WordPress development workflow"
  echo "   ‚Ä¢ Nginx proxy configuration so you dont have to download assets locally"
  echo "   ‚Ä¢ Theme development tools with Node.js/NPM support"
  echo "   ‚Ä¢ Cypress testing integration"
  echo "   ‚Ä¢ WordPress block creation tools"
  echo "   ‚Ä¢ Migration and backup utilities"
  echo "   ‚Ä¢ Redis, Solr, and PhpMyAdmin add-ons installed"
  echo "   ‚Ä¢ Automatic Pantheon mu-plugin conflict resolution for DDEV compatibility"
  echo ""
  echo "üîß Next steps:"
  echo "   1. Run 'ddev restart' to apply configuration changes"
  echo "   2. Run 'ddev init' to complete project initialization"
  echo ""
  echo "üìö Run 'ddev help' to see available commands"
  echo ""

removal_actions:
# Remove all installed components and add-ons
- |
  echo ""
  echo "üóëÔ∏è Removing Kanopi WordPress Add-on..."
  echo ""
  
  # Remove DDEV add-ons
  echo "üì¶ Removing DDEV add-ons..."
  
  # Remove Redis add-on
  if ddev add-on remove ddev-redis 2>/dev/null; then
    echo "‚úÖ Redis add-on removed successfully"
  else
    echo "‚ö†Ô∏è Redis add-on removal failed or not found"
  fi
  
  # Remove Solr add-on
  if ddev add-on remove ddev-solr 2>/dev/null; then
    echo "‚úÖ Solr add-on removed successfully"
  else
    echo "‚ö†Ô∏è Solr add-on removal failed or not found"
  fi
  
  # Remove PhpMyAdmin add-on
  if ddev add-on remove ddev-phpmyadmin 2>/dev/null; then
    echo "‚úÖ PhpMyAdmin add-on removed successfully"
  else
    echo "‚ö†Ô∏è PhpMyAdmin add-on removal failed or not found"
  fi
  
  # Remove all custom commands
  echo "üîß Removing custom commands..."
  
  # Remove host commands
  rm -f commands/host/cypress 2>/dev/null || true
  rm -f commands/host/cypress-users 2>/dev/null || true
  rm -f commands/host/init 2>/dev/null || true
  rm -f commands/host/install-cypress 2>/dev/null || true
  rm -f commands/host/phpmyadmin 2>/dev/null || true
  rm -f commands/host/rebuild 2>/dev/null || true
  rm -f commands/host/testenv 2>/dev/null || true
  rm -f commands/host/configure 2>/dev/null || true
  rm -f commands/host/npm 2>/dev/null || true
  rm -f commands/host/phpcbf 2>/dev/null || true
  rm -f commands/host/phpcs 2>/dev/null || true
  rm -f commands/host/terminus 2>/dev/null || true
  
  # Remove web commands
  rm -f commands/web/install-critical-tools 2>/dev/null || true
  rm -f commands/web/install-theme-tools 2>/dev/null || true
  rm -f commands/web/migrate-prep-db 2>/dev/null || true
  rm -f commands/web/npx 2>/dev/null || true
  rm -f commands/web/tickle 2>/dev/null || true
  rm -f commands/web/activate-theme 2>/dev/null || true
  rm -f commands/web/create-block 2>/dev/null || true
  rm -f commands/web/development 2>/dev/null || true
  rm -f commands/web/open 2>/dev/null || true
  rm -f commands/web/production 2>/dev/null || true
  rm -f commands/web/refresh 2>/dev/null || true
  rm -f commands/web/restore-admin-user 2>/dev/null || true
  
  echo "‚úÖ Custom commands removed"
  
  # Remove config files, scripts, and nginx config
  rm -rf config 2>/dev/null || true
  rm -rf scripts 2>/dev/null || true
  
  # Restore Pantheon mu-plugin loader if it was disabled during installation
  PANTHEON_LOADER_DISABLED="../../web/wp-content/mu-plugins/pantheon-mu-loader.php.disabled"
  if [ -f "$PANTHEON_LOADER_DISABLED" ]; then
    PANTHEON_LOADER="../../web/wp-content/mu-plugins/pantheon-mu-loader.php"
    mv "$PANTHEON_LOADER_DISABLED" "$PANTHEON_LOADER"
    echo "‚úÖ Restored Pantheon mu-plugin loader (was disabled during add-on installation)"
  fi
  
  # Clean up gitignore
  if [ -f ../../.gitignore ]; then
    grep -v "settings.ddev.redis.php\|settings.ddev.solr.php" ../../.gitignore > ../../.gitignore.tmp && mv ../../.gitignore.tmp ../../.gitignore || rm -f ../../.gitignore.tmp
  fi
  
  # Clean up empty directories
  rmdir commands/host 2>/dev/null || true
  rmdir commands/web 2>/dev/null || true
  rmdir commands 2>/dev/null || true
  
  echo ""
  echo "‚úÖ Kanopi WordPress Add-on removed successfully!"
  echo "   ‚Ä¢ Redis, Solr, and PhpMyAdmin add-ons uninstalled"
  echo "   ‚Ä¢ All 20+ custom commands removed"
  echo "   ‚Ä¢ Nginx proxy configuration removed"
  echo "   ‚Ä¢ Environment variables preserved (remove manually if needed)"
  echo ""
  echo "üí° Tip: Run 'ddev restart' to apply changes"
  echo ""