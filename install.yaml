name: ddev-kanopi-wp

# Based on https://github.com/ddev/ddev/blob/HEAD/pkg/ddevapp/addons.go#L61
project_files:
- commands/
- config/
- scripts/

# DDEV version constraint
ddev_version_constraint: ">= v1.22.0"

# Pre-install actions
pre_install_actions:
# Introduction
- |
  #ddev-description:Configuring Kanopi WordPress Add-on
  echo ""
  echo "🔧 Configuring Kanopi WordPress Add-on..."
  echo ""
  echo "💡 Note: Configuration variables can be set later using 'ddev project-configure'"
  echo ""

# Post-install actions
post_install_actions:  

- |
  #ddev-description: Install required DDEV add-ons
  # Install DDEV add-ons with graceful failure handling for CI environments
  set +e  # Allow commands to fail without stopping the script
  echo ""
  echo "📦 Installing Redis add-on..."
  if ddev add-on get ddev/ddev-redis 2>&1; then
    echo "✅ Redis add-on installed successfully"
  else
    echo "⚠️  Redis add-on installation failed (likely GitHub API rate limit in CI)"
    echo "   You can install it manually later with: ddev add-on get ddev/ddev-redis"
  fi
  echo ""
  echo "📦 Installing Solr add-on..."
  if ddev add-on get ddev/ddev-solr 2>&1; then
    echo "✅ Solr add-on installed successfully"
  else
    echo "⚠️  Solr add-on installation failed (likely GitHub API rate limit in CI)"
    echo "   You can install it manually later with: ddev add-on get ddev/ddev-solr"
  fi
  echo ""
  echo "📦 Installing PhpMyAdmin add-on..."
  if ddev add-on get ddev/ddev-phpmyadmin 2>&1; then
    echo "✅ PhpMyAdmin add-on installed successfully"
  else
    echo "⚠️  PhpMyAdmin add-on installation failed (likely GitHub API rate limit in CI)"
    echo "   You can install it manually later with: ddev add-on get ddev/ddev-phpmyadmin"
  fi
  set -e  # Re-enable strict error checking
  echo ""
  echo "Ignore DDEV add-on settings files"
  echo "settings.ddev.redis.php" >> ../.gitignore
  echo "settings.ddev.solr.php" >> ../.gitignore

- |
  #ddev-description: WordPress configuration setup
  echo ""
  echo "📦 WordPress configuration complete - all settings now use environment variables"

  # Get the actual docroot from DDEV config.yaml since project isn't running yet
  # Find config.yaml file - it could be at different relative paths depending on install context
  CONFIG_FILE=""
  for path in "../../config.yaml" "../../../config.yaml" "config.yaml" "../config.yaml"; do
    if [ -f "$path" ]; then
      CONFIG_FILE="$path"
      break
    fi
  done

  if [ -n "$CONFIG_FILE" ]; then
    DOCROOT=$(grep '^docroot:' "$CONFIG_FILE" 2>/dev/null | cut -d: -f2 | tr -d ' "'\''' || echo "web")
  else
    DOCROOT="web"
  fi

  WP_CONFIG_PATH="../../${DOCROOT}/wp-config.php"

  # Add ddev-managed settings to wp-config.php
  if [ -f "$WP_CONFIG_PATH" ]; then
    # Check if the ddev settings snippet is already present
    if ! grep -q "wp-config-ddev.php" "$WP_CONFIG_PATH"; then
      # Create a temporary file with the new content
      {
        head -n 1 "$WP_CONFIG_PATH"  # <?php line
        echo ""
        echo "// Added for ddev-managed settings in wp-config-ddev.php."
        echo "\$ddev_settings = dirname(__FILE__) . '/wp-config-ddev.php';"
        echo "if (is_readable(\$ddev_settings)) {"
        echo "  require_once(\$ddev_settings);"
        echo "}"
        echo ""
        tail -n +2 "$WP_CONFIG_PATH"  # Rest of the file
      } > "${WP_CONFIG_PATH}.tmp"
      mv "${WP_CONFIG_PATH}.tmp" "$WP_CONFIG_PATH"
      echo "📝 Added ddev-managed settings to wp-config.php"
    else
      echo "📝 ddev-managed settings already present in wp-config.php"
    fi
  else
    echo "⚠️  wp-config.php not found at ${DOCROOT}/wp-config.php"
  fi

  # Update wp-config-ddev.php to use WP_PREFIX environment variable
  WP_CONFIG_DDEV_PATH="../../${DOCROOT}/wp-config-ddev.php"
  if [ -f "$WP_CONFIG_DDEV_PATH" ]; then
    # Check if the fix is already applied
    if ! grep -q "getenv.*WP_PREFIX" "$WP_CONFIG_DDEV_PATH"; then
      echo "📝 Updating wp-config-ddev.php to use WP_PREFIX environment variable..."
      sed -i.bak "s/\$table_prefix = 'wp_';/\$table_prefix = getenv( 'WP_PREFIX' ) ?: 'wp_';/" "$WP_CONFIG_DDEV_PATH"
      rm -f "${WP_CONFIG_DDEV_PATH}.bak" 2>/dev/null || true
      echo "✅ wp-config-ddev.php updated to use WP_PREFIX"
    else
      echo "📝 wp-config-ddev.php already uses WP_PREFIX environment variable"
    fi
  else
    echo "📝 wp-config-ddev.php not found (will be created later by DDEV)"
  fi

- |
  #ddev-description: Handle Pantheon mu-plugins compatibility
  # Disable Pantheon mu-plugins that conflict with DDEV environment
  echo ""
  echo "🔧 Checking for Pantheon mu-plugins that need to be disabled in DDEV..."

  # Use the same docroot from config.yaml since project isn't running yet
  # Find config.yaml file - it could be at different relative paths depending on install context
  CONFIG_FILE=""
  for path in "../../config.yaml" "../../../config.yaml" "config.yaml" "../config.yaml"; do
    if [ -f "$path" ]; then
      CONFIG_FILE="$path"
      break
    fi
  done

  if [ -n "$CONFIG_FILE" ]; then
    DOCROOT=$(grep '^docroot:' "$CONFIG_FILE" 2>/dev/null | cut -d: -f2 | tr -d ' "'\''' || echo "web")
  else
    DOCROOT="web"
  fi

  PANTHEON_LOADER="../${DOCROOT}/wp-content/mu-plugins/pantheon-mu-loader.php"

  if [ -f "$PANTHEON_LOADER" ]; then
    # Check if the loader tries to load pantheon-mu-plugin
    if grep -q "pantheon-mu-plugin/pantheon.php" "$PANTHEON_LOADER"; then
      # Check if the actual plugin directory exists
      if [ ! -d "../${DOCROOT}/wp-content/mu-plugins/pantheon-mu-plugin" ]; then
        echo "📝 Found Pantheon mu-plugin loader but plugin directory missing"
        echo "   Disabling to prevent PHP fatal errors in DDEV environment..."
        mv "$PANTHEON_LOADER" "${PANTHEON_LOADER}.disabled"
        echo "✅ Pantheon mu-plugin loader disabled (renamed to .disabled)"
        echo "   This prevents 'Failed to open stream' errors when running WP-CLI commands"
      else
        echo "📝 Pantheon mu-plugin found and appears complete - leaving enabled"
      fi
    else
      echo "📝 Custom pantheon-mu-loader.php found - leaving as-is"
    fi
  else
    echo "📝 No Pantheon mu-plugin loader found - no action needed"
  fi

# Explain the installed components
- |
  echo ""
  echo "✅ Kanopi WordPress Add-on installed successfully!"
  echo ""
  echo "🔧 Next steps:"
  echo "   1. Run 'ddev project-configure' to set up your hosting provider and variables"
  echo "   2. Review wp-config settings if your project already has a wp-config.php"
  echo "   3. Review the theme commands in .ddev/command/web if your project was not built on Struts."
  echo "   4. Run 'ddev project-init' to complete project initialization"
  echo ""
  echo "📚 Run 'ddev help' to see available commands"
  echo ""

removal_actions:
# Remove all installed components and add-ons
- |
  echo ""
  echo "🗑️ Removing Kanopi WordPress Add-on..."
  echo ""
  
  # Remove DDEV add-ons
  echo "📦 Removing DDEV add-ons..."
  
  # Remove Redis add-on
  if ddev add-on remove ddev-redis 2>/dev/null; then
    echo "✅ Redis add-on removed successfully"
  else
    echo "⚠️ Redis add-on removal failed or not found"
  fi
  
  # Remove Solr add-on
  if ddev add-on remove ddev-solr 2>/dev/null; then
    echo "✅ Solr add-on removed successfully"
  else
    echo "⚠️ Solr add-on removal failed or not found"
  fi
  
  # Remove PhpMyAdmin add-on
  if ddev add-on remove ddev-phpmyadmin 2>/dev/null; then
    echo "✅ PhpMyAdmin add-on removed successfully"
  else
    echo "⚠️ PhpMyAdmin add-on removal failed or not found"
  fi
  
  # Remove all custom commands
  echo "🔧 Removing custom commands..."
  
  # Remove host commands
  rm -f commands/host/cypress-install 2>/dev/null || true
  rm -f commands/host/cypress-run 2>/dev/null || true
  rm -f commands/host/cypress-users 2>/dev/null || true
  rm -f commands/host/db-rebuild 2>/dev/null || true
  rm -f commands/host/pantheon-terminus 2>/dev/null || true
  rm -f commands/host/pantheon-testenv 2>/dev/null || true
  rm -f commands/host/phpmyadmin 2>/dev/null || true
  rm -f commands/host/project-auth 2>/dev/null || true
  rm -f commands/host/project-configure 2>/dev/null || true
  rm -f commands/host/project-init 2>/dev/null || true
  rm -f commands/host/project-lefthook 2>/dev/null || true
  rm -f commands/host/project-wp 2>/dev/null || true
  
  # Remove web commands
  rm -f commands/web/critical-install 2>/dev/null || true
  rm -f commands/web/critical-run 2>/dev/null || true
  rm -f commands/web/db-prep-migrate 2>/dev/null || true
  rm -f commands/web/db-refresh 2>/dev/null || true
  rm -f commands/web/pantheon-tickle 2>/dev/null || true
  rm -f commands/web/theme-activate 2>/dev/null || true
  rm -f commands/web/theme-build 2>/dev/null || true
  rm -f commands/web/theme-create-block 2>/dev/null || true
  rm -f commands/web/theme-install 2>/dev/null || true
  rm -f commands/web/theme-npm 2>/dev/null || true
  rm -f commands/web/theme-npx 2>/dev/null || true
  rm -f commands/web/theme-watch 2>/dev/null || true
  rm -f commands/host/wp-open 2>/dev/null || true
  rm -f commands/web/wp-restore-admin-user 2>/dev/null || true
  
  echo "✅ Custom commands removed"
  
  # Remove specific config files
  echo "🔧 Removing config files..."
  rm -f config/nginx/nginx-common.conf 2>/dev/null || true
  rm -f config/nginx/nginx-site.conf 2>/dev/null || true
  rm -f config/wp/block-template/block.json 2>/dev/null || true

  # Remove specific script files
  echo "🔧 Removing script files..."
  rm -f scripts/kinsta-refresh.sh 2>/dev/null || true
  rm -f scripts/load-config.sh 2>/dev/null || true
  rm -f scripts/pantheon-refresh.sh 2>/dev/null || true
  rm -f scripts/wpengine-refresh.sh 2>/dev/null || true

  # Remove directory structure
  rm -rf config 2>/dev/null || true
  rm -rf scripts 2>/dev/null || true
  
  # Restore Pantheon mu-plugin loader if it was disabled during installation
  # Find config.yaml file for docroot detection
  CONFIG_FILE=""
  for path in "../../config.yaml" "../../../config.yaml" "config.yaml" "../config.yaml"; do
    if [ -f "$path" ]; then
      CONFIG_FILE="$path"
      break
    fi
  done

  if [ -n "$CONFIG_FILE" ]; then
    DOCROOT=$(grep '^docroot:' "$CONFIG_FILE" 2>/dev/null | cut -d: -f2 | tr -d ' "'\''' || echo "web")
  else
    DOCROOT="web"
  fi

  PANTHEON_LOADER_DISABLED="../${DOCROOT}/wp-content/mu-plugins/pantheon-mu-loader.php.disabled"
  if [ -f "$PANTHEON_LOADER_DISABLED" ]; then
    PANTHEON_LOADER="../${DOCROOT}/wp-content/mu-plugins/pantheon-mu-loader.php"
    mv "$PANTHEON_LOADER_DISABLED" "$PANTHEON_LOADER"
    echo "✅ Restored Pantheon mu-plugin loader (was disabled during add-on installation)"
  fi

  # Restore original wp-config-ddev.php table prefix
  WP_CONFIG_DDEV_PATH="../${DOCROOT}/wp-config-ddev.php"
  if [ -f "$WP_CONFIG_DDEV_PATH" ]; then
    if grep -q "getenv.*WP_PREFIX" "$WP_CONFIG_DDEV_PATH"; then
      echo "✅ Restoring wp-config-ddev.php table prefix to default"
      sed -i.bak "s/\$table_prefix = getenv( 'WP_PREFIX' ) ?: 'wp_';/\$table_prefix = 'wp_';/" "$WP_CONFIG_DDEV_PATH"
      rm -f "${WP_CONFIG_DDEV_PATH}.bak" 2>/dev/null || true
    fi
  fi

  # Clean up gitignore
  if [ -f ../../.gitignore ]; then
    grep -v "settings.ddev.redis.php\|settings.ddev.solr.php" ../../.gitignore > ../../.gitignore.tmp && mv ../../.gitignore.tmp ../../.gitignore || rm -f ../../.gitignore.tmp
  fi
  
  # Clean up empty directories
  rmdir commands/host 2>/dev/null || true
  rmdir commands/web 2>/dev/null || true
  rmdir commands 2>/dev/null || true
  
  echo ""
  echo "✅ Kanopi WordPress Add-on removed successfully!"
  echo "   • Redis, Solr, and PhpMyAdmin add-ons uninstalled"
  echo "   • All 26 custom commands removed"
  echo "   • Nginx proxy configuration removed"
  echo "   • Environment variables preserved (remove manually if needed)"
  echo ""
  echo "💡 Tip: Run 'ddev restart' to apply changes"
  echo ""
