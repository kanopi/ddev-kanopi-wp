#!/usr/bin/env bash
#ddev-generated

## Open the site or admin in your default browser
##
## Usage: wp-open [service]
## Example: "ddev wp-open"
## Example: "ddev wp-open admin"
## Aliases: open,wp:open

SERVICE="${1:-}"

# Load configuration to get hosting provider and docroot
source /var/www/html/.ddev/scripts/load-config.sh
load_kanopi_config

# Determine docroot based on hosting provider
case "${HOSTING_PROVIDER}" in
    "pantheon")
        DOCROOT="web"
        DOCROOT_PATH="/var/www/html/${DOCROOT}"
        ;;
    "wpengine")
        # Use configured DOCROOT from environment, fallback to 'web'
        DOCROOT="${DOCROOT:-web}"
        # Handle application root case (. or empty)
        if [ "$DOCROOT" = "." ] || [ -z "$DOCROOT" ]; then
            DOCROOT_PATH="/var/www/html"
        else
            DOCROOT_PATH="/var/www/html/${DOCROOT}"
        fi
        ;;
    "kinsta")
        DOCROOT="public"
        DOCROOT_PATH="/var/www/html/${DOCROOT}"
        ;;
    *)
        DOCROOT=$(printenv DOCROOT 2>/dev/null || echo "web")
        DOCROOT_PATH="/var/www/html/${DOCROOT}"
        ;;
esac

# Function to open URL in browser
open_browser() {
    local url="$1"
    local description="$2"

    echo "$description"
    if command -v xdg-open >/dev/null 2>&1; then
        xdg-open "$url"
    elif command -v open >/dev/null 2>&1; then
        open "$url"
    else
        echo "Please open $url in your browser"
    fi
}

if [ "$SERVICE" = "cms" ] || [ "$SERVICE" = "admin" ]; then
    # Get admin user from environment variable or default to 'admin'
    ADMIN_USER="${WP_ADMIN_USER:-admin}"

    # Install and set up the login command
    if ! wp login --help --path="${DOCROOT_PATH}" --allow-root >/dev/null 2>&1; then
        echo "üì¶ Installing login command..."
        if wp package install aaemnnosttv/wp-cli-login-command --allow-root 2>/dev/null; then
            echo "‚úÖ Login command installed successfully"
        else
            echo "‚ùå Failed to install login command - using fallback"
            open_browser "https://${DDEV_SITENAME}.ddev.site/wp-admin" "Opening WordPress admin..."
            exit 0
        fi
    fi

    # Check if login plugin is already active, install if needed
    if ! wp plugin is-active wp-cli-login-server --path="${DOCROOT_PATH}" --allow-root >/dev/null 2>&1; then
        echo "üì¶ Setting up login plugin..."
        # Try to activate first in case it's installed but not active
        if wp plugin activate wp-cli-login-server --path="${DOCROOT_PATH}" --allow-root >/dev/null 2>&1; then
            echo "‚úÖ Login plugin activated"
        else
            # Install and activate if not installed
            if wp login install --activate --path="${DOCROOT_PATH}" --allow-root >/dev/null 2>&1; then
                echo "‚úÖ Login plugin installed and activated"
            else
                echo "‚ÑπÔ∏è  Login plugin setup failed - using fallback"
                open_browser "https://${DDEV_SITENAME}.ddev.site/wp-admin" "Opening WordPress admin..."
                exit 0
            fi
        fi
    fi

    # Generate login URL
    LOGIN_RESULT=$(wp login create "$ADMIN_USER" --path="${DOCROOT_PATH}" --allow-root 2>&1)

    # Extract just the URL from the success message
    LOGIN_URL=$(echo "$LOGIN_RESULT" | grep -o 'https://[^[:space:]]*')

    if [ -n "$LOGIN_URL" ]; then
        open_browser "$LOGIN_URL" "üöÄ Opening WordPress admin with auto-login..."
    else
        # Fallback to regular admin URL
        echo "‚ö†Ô∏è  Could not generate login link, opening regular admin page..."
        open_browser "https://${DDEV_SITENAME}.ddev.site/wp-admin" "Opening WordPress admin..."
    fi
else
    open_browser "https://${DDEV_SITENAME}.ddev.site" "üåê Opening site..."
fi
