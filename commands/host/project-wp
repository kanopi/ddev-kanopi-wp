#!/usr/bin/env bash

## Description: Install & WordPress if needed.
## Usage: project-wp
## Example: "ddev project-wp"
## Aliases: project:wp

#ddev-generated

# Colors and formatting
green='\033[0;32m'
yellow='\033[1;33m'
NC='\033[0m'
divider='===================================================\n'
construction='\xF0\x9F\x9A\xA7'

# Load configuration to get hosting provider
source .ddev/scripts/load-config.sh
load_kanopi_config

# Determine docroot based on hosting provider
case "${HOSTING_PROVIDER}" in
    "pantheon")
        DOCROOT="web"
        ;;
    "wpengine")
        # Use configured DOCROOT from environment, fallback to 'web'
        DOCROOT="${DOCROOT:-web}"
        # Handle application root case (. or empty)
        if [ "$DOCROOT" = "." ] || [ -z "$DOCROOT" ]; then
            DOCROOT=""
            DOCROOT_PATH="/var/www/html"
            echo "Using application root (no subfolder) for WPEngine"
        else
            DOCROOT_PATH="/var/www/html/${DOCROOT}"
            echo "Using docroot: $DOCROOT for hosting provider: $HOSTING_PROVIDER"
        fi
        ;;
    "kinsta")
        DOCROOT="public"
        DOCROOT_PATH="/var/www/html/${DOCROOT}"
        echo "Using docroot: $DOCROOT for hosting provider: $HOSTING_PROVIDER"
        ;;
    *)
        DOCROOT="web"  # Default fallback
        DOCROOT_PATH="/var/www/html/${DOCROOT}"
        echo "Using docroot: $DOCROOT for hosting provider: $HOSTING_PROVIDER"
        ;;
esac

# Set DOCROOT_PATH for non-WPEngine providers
if [ -z "$DOCROOT_PATH" ]; then
    DOCROOT_PATH="/var/www/html/${DOCROOT}"
fi

# For local file checks, use DOCROOT or "." for application root
if [ -z "$DOCROOT" ]; then
    LOCAL_PATH="."
else
    LOCAL_PATH="${DOCROOT}"
fi

# Check if WordPress core needs to be installed
# First check the expected docroot location for WordPress files
CORE_CHECK_PASSED="false"
if [ -f "${LOCAL_PATH}/index.php" ] && [ -f "${LOCAL_PATH}/wp-load.php" ]; then
  CORE_CHECK_PASSED="true"
fi

# For composer-managed installs, also check if WordPress was moved from another location
if [ "$CORE_CHECK_PASSED" = "false" ] && [ -f "public/wp-config-sample.php" ]; then
  echo "üìù Found WordPress core files managed by composer, checking if they need to be moved to docroot..."
  CORE_CHECK_PASSED="true"
fi

# Install WordPress core if needed
if [ "$CORE_CHECK_PASSED" = "false" ]; then
  echo -e "\n${construction} ${yellow} Installing WordPress core...${NC} ${construction}\n"
  echo -e "${green}${divider}${NC}"
  ddev exec "wp core download --path=${DOCROOT_PATH} --allow-root"

  # Only create config if it doesn't exist
  if [ ! -f "${LOCAL_PATH}/wp-config.php" ] && [ ! -f "${LOCAL_PATH}/wp-config-ddev.php" ]; then
    echo "üìù Creating WordPress configuration file..."
    ddev exec "wp config create --dbname=db --dbuser=db --dbpass=db --dbhost=db --path=${DOCROOT_PATH} --allow-root"
  fi
else
  echo "üìù WordPress core files found in docroot: ${LOCAL_PATH}"
fi

# Install WordPress database (if not already installed)
# Check if WordPress core files exist in the expected docroot
WP_CORE_EXISTS="false"
if [ -f "${LOCAL_PATH}/index.php" ] || [ -f "${LOCAL_PATH}/wp-load.php" ]; then
  WP_CORE_EXISTS="true"
elif [ -f "public/index.php" ] || [ -f "public/wp-load.php" ]; then
  # Check if WordPress exists in public directory (common for composer installs)
  WP_CORE_EXISTS="true"
  echo "üìù Found WordPress core files in public directory"
fi

if [ "$WP_CORE_EXISTS" = "true" ]; then
  # Check if WordPress database is installed
  echo "üìù Checking WordPress database installation status..."
  WP_INSTALLED=$(ddev exec "wp core is-installed --path=${DOCROOT_PATH} --allow-root" 2>/dev/null && echo "true" || echo "false")

  if [ "$WP_INSTALLED" = "false" ]; then
    echo -e "\n${construction} ${yellow} Setting up WordPress database...${NC} ${construction}\n"
    echo -e "${green}${divider}${NC}"

    # Make sure wp-config.php exists first
    if [ ! -f "${LOCAL_PATH}/wp-config.php" ] && [ ! -f "${LOCAL_PATH}/wp-config-ddev.php" ]; then
      echo "üìù Creating WordPress configuration file..."
      ddev exec "wp config create --dbname=db --dbuser=db --dbpass=db --dbhost=db --path=${DOCROOT_PATH} --allow-root"
    fi

    # Install WordPress
    echo "üìù Installing WordPress database tables..."
    INSTALL_RESULT=$(ddev exec "wp core install --url=\$DDEV_PRIMARY_URL --title='WordPress Site' --admin_user=admin --admin_password=admin --admin_email=admin@example.com --path=${DOCROOT_PATH} --allow-root" 2>&1)

    if echo "$INSTALL_RESULT" | grep -q "Success"; then
      echo "‚úÖ WordPress database installed successfully"
    else
      echo "üìù WordPress database setup completed (may have been already configured)"
      echo "   Output: $INSTALL_RESULT"
    fi
  else
    echo "‚úÖ WordPress database is already installed"
  fi
else
  echo "‚ö†Ô∏è  WordPress core files not found - please check your composer setup"
  echo "   Expected location: ${LOCAL_PATH}/"
  echo "   Alternate location checked: public/"
fi
