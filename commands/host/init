#!/usr/bin/env bash

## Description: Initialize local WordPress development environment.
## Usage: init
## Example: "ddev init"
## OSTypes: darwin,linux

#ddev-generated

#-------------------------- Helper functions ------------------------------

green='\033[0;32m'
yellow='\033[1;33m'
NC='\033[0m'

divider='===================================================\n'
check='\xE2\x9C\x85'
construction='\xF0\x9F\x9A\xA7'
crossmark='\xE2\x9D\x8C'
party='\xF0\x9F\x8E\x88 \xF0\x9F\x8E\x89 \xF0\x9F\x8E\x8A'
reverseparty='\xF0\x9F\x8E\x8A \xF0\x9F\x8E\x89 \xF0\x9F\x8E\x88'
rocket='\xF0\x9F\x9A\x80'
lightning='\xE2\x9A\xA1'
gear='\xEF\xB8\x8F'
key='\xF0\x9F\x94\x91'
lock='\xF0\x9F\x94\x92'
arm='\xF0\x9F\x92\xAA'

# WordPress-specific commands
theme_dev_command='ddev development'
theme_build_command='ddev production'

# Check for Lefthook (if using git hooks)
LEFTHOOK=$(which lefthook || true)
if [[ "${LEFTHOOK}" == "" ]] && [[ -f ".lefthook.yml" ]]; then
  echo -e "\n${construction} ${yellow} Checking for Lefthook.${NC} ${construction}\n"
  echo -e "If you don't have Lefthook installed, this will ask for your password."
  echo -e "Installing Lefthook."
  ARCH=$(uname -m)
  if [[ "$OSTYPE" == "darwin"* ]]; then
    # macOS
    sudo curl -fsSL -o /usr/local/bin/lefthook "https://github.com/evilmartians/lefthook/releases/download/v1.5.2/lefthook_1.5.2_MacOS_${ARCH}"
  else
    # Linux
    sudo curl -fsSL -o /usr/local/bin/lefthook "https://github.com/evilmartians/lefthook/releases/download/v1.5.2/lefthook_1.5.2_Linux_${ARCH}"
  fi
  echo -e "Setting Lefthook permissions."
  sudo chmod +x /usr/local/bin/lefthook
  echo -e "${green}${divider}${NC}"
fi

#-------------------------- Execution -------------------------------------

echo -e "\n${rocket} ${yellow} Initializing WordPress Development Environment${NC} ${rocket}"
echo -e "${green}${divider}${NC}"

# Initialize Lefthook if config exists
if [[ -f ".lefthook.yml" ]] && [[ "${LEFTHOOK}" != "" ]]; then
  echo -e "\n${construction} ${yellow} Initializing Lefthook.${NC} ${construction}"
  echo -e "This should require no input."
  echo -e "${green}${divider}${NC}"
  lefthook install
fi

# Initialize NVM for Node.js management
echo -e "\n${construction} ${yellow} Initializing NVM...${NC} ${construction}\n"
echo -e "This should require no input."
echo -e "${green}${divider}${NC}"
NVM_DIR="${HOME}/.nvm"
if [[ ! -d "$NVM_DIR" ]]; then
    echo -e "Installing NVM."
    echo -e "${green}${divider}${NC}"
    curl -o- https://raw.githubusercontent.com/nvm-sh/nvm/v0.39.7/install.sh | bash
    export NVM_DIR="$([ -z "${XDG_CONFIG_HOME-}" ] && printf %s "${HOME}/.nvm" || printf %s "${XDG_CONFIG_HOME}/nvm")"
    [ -s "$NVM_DIR/nvm.sh" ] && \. "$NVM_DIR/nvm.sh" # This loads nvm
fi

# Start DDEV
echo -e "\n${rocket} ${yellow} Starting DDEV.${NC} ${rocket}"
echo -e "${green}${divider}${NC}"
ddev start -y

# Add SSH keys for Pantheon/remote access
echo -e "\n${key} ${yellow} Adding SSH keys.${NC} ${key}"
echo -e "${green}${divider}${NC}"
ddev auth ssh

# Install Composer dependencies (if composer.json exists)
if [ -f "composer.json" ]; then
  echo -e "\n${construction} ${yellow} Installing Composer dependencies...${NC} ${construction}\n"
  echo -e "This should require no input."
  echo -e "${green}${divider}${NC}"
  ddev composer install
fi

# Install WordPress core (if not already installed)
if [ ! -f "web/wp-config.php" ] && [ ! -f "web/wp-config-ddev.php" ]; then
  echo -e "\n${construction} ${yellow} Installing WordPress...${NC} ${construction}\n"
  echo -e "${green}${divider}${NC}"
  ddev exec "wp core download --path=/var/www/html/web --allow-root"
  ddev exec "wp config create --dbname=db --dbuser=db --dbpass=db --dbhost=db --path=/var/www/html/web --allow-root"
fi

# Get the database from Pantheon (if configured)
CONFIG_FILE=".ddev/config.kanopi.yaml"
if [ -f "$CONFIG_FILE" ]; then
  PANTHEON_SITE=$(yq eval '.pantheon.site // ""' "$CONFIG_FILE" 2>/dev/null || echo "")
  if [ -n "$PANTHEON_SITE" ] && [ "$PANTHEON_SITE" != "your-pantheon-site-name" ]; then
    echo -e "\n${lightning} ${yellow} Refreshing database from Pantheon...${NC} ${lightning}"
    echo -e "${green}${divider}${NC}"
    ddev refresh
  fi
fi

# Install theme dependencies and build assets
THEME_PATH=$(yq eval '.theme.relative_path // "wp-content/themes/custom/struts"' "$CONFIG_FILE" 2>/dev/null || echo "wp-content/themes/custom/struts")
if [ -f "web/${THEME_PATH}/package.json" ]; then
  echo -e "\n${construction} ${yellow} Installing theme dependencies...${NC} ${construction}\n"
  echo -e "${green}${divider}${NC}"
  ddev npm install
  
  echo -e "\n${gear} ${yellow} Building theme assets...${NC} ${gear}"
  echo -e "${green}${divider}${NC}"
  ddev production
fi

# Activate theme and restore admin user
echo -e "\n${lock} ${yellow} Configuring WordPress...${NC} ${lock}"
echo -e "${green}${divider}${NC}"

# Activate the custom theme (if configured)
if [ -f "$CONFIG_FILE" ]; then
  THEME_SLUG=$(yq eval '.theme.slug // "struts"' "$CONFIG_FILE" 2>/dev/null || echo "struts")
  ddev exec "wp theme activate ${THEME_SLUG} --allow-root" 2>/dev/null || echo "Theme activation skipped (theme not found)"
fi

# Restore admin user
ddev restore-admin-user

# Generate login link
echo -e "\n${lock} ${yellow} Generating admin login link...${NC} ${lock}"
echo -e "${green}${divider}${NC}"
ADMIN_USER=$(yq eval '.wordpress.admin_user // "admin"' "$CONFIG_FILE" 2>/dev/null || echo "admin")
LOGIN_URL=$(ddev exec "wp user generate-login-url ${ADMIN_USER} --allow-root" 2>/dev/null || echo "Login link generation failed")

# Complete
echo -e "\n${party} ${yellow} WordPress development environment ready!${NC} ${reverseparty}"
echo -e "Visit ${yellow}${DDEV_PRIMARY_URL}${NC} in a web browser."
if [ "$LOGIN_URL" != "Login link generation failed" ]; then
  echo -e "Admin login: ${yellow}${LOGIN_URL}${NC}"
fi
echo -e "\nDevelopment commands:"
echo -e "Run ${yellow}${theme_dev_command}${NC} to start theme development with file watching."
echo -e "Run ${yellow}${theme_build_command}${NC} to build production assets."
echo -e "Run ${yellow}ddev refresh${NC} to pull fresh database from Pantheon."
echo -e "${green}${divider}${NC}"