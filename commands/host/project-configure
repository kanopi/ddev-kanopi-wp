#!/usr/bin/env bash

## Description: Interactive configuration wizard for Kanopi WordPress DDEV
## Usage: project-configure
## Example: "ddev project-configure"
## Aliases: configure,project:configure,prc

#ddev-generated

# Colors and formatting
green='\033[0;32m'
yellow='\033[1;33m'
red='\033[0;31m'
NC='\033[0m'
divider='===================================================\n'

echo -e "\nüîß ${yellow}Kanopi WordPress DDEV Configuration Wizard${NC} üîß"
echo -e "${green}${divider}${NC}"
echo "This tool sets up configuration variables for your hosting provider and development settings."
echo "Variables are stored in .ddev/scripts/load-config.sh"
echo "Press Ctrl+C anytime to exit."
echo ""

# Check if DDEV project exists
if [ ! -f ".ddev/config.yaml" ]; then
    echo "‚ùå DDEV project not found. Please run this command from your DDEV project root."
    echo "üí° If this is a new project, run 'ddev add-on get kanopi/ddev-kanopi-wp' first."
    exit 1
fi

# Check if load-config.sh exists
if [ ! -f ".ddev/scripts/load-config.sh" ]; then
    echo "‚ùå Kanopi WordPress add-on scripts not found."
    echo "Please run 'ddev add-on get kanopi/ddev-kanopi-wp' first"
    exit 1
fi

# Function to prompt for input with default
prompt_input() {
    local prompt="$1"
    local default="$2"
    local var_name="$3"
    
    if [ -n "$default" ]; then
        echo -n "$prompt [$default]: "
    else
        echo -n "$prompt: "
    fi
    
    read -r input
    if [ -z "$input" ] && [ -n "$default" ]; then
        input="$default"
    fi
    
    eval "$var_name='$input'"
}

# Function to select from options
select_option() {
    local prompt="$1"
    shift
    local options=("$@")
    
    printf "%s\n" "$prompt" >&2
    for i in "${!options[@]}"; do
        printf "  %d. %s\n" "$((i+1))" "${options[i]}" >&2
    done
    printf "Select option [1]: " >&2
    
    read -r choice
    choice=${choice:-1}
    
    if [[ "$choice" =~ ^[0-9]+$ ]] && [ "$choice" -ge 1 ] && [ "$choice" -le "${#options[@]}" ]; then
        echo "${options[$((choice-1))]}"
    else
        echo "${options[0]}"
    fi
}

# Load current configuration from load-config.sh
source .ddev/scripts/load-config.sh
load_kanopi_config

# Show current configuration
echo "üìã Current Configuration:"
echo "------------------------"
echo "Hosting Provider: ${HOSTING_PROVIDER:-not set}"

# Show provider-specific configuration
case "${HOSTING_PROVIDER:-not set}" in
    "pantheon")
        echo "Pantheon Site: ${HOSTING_SITE:-not set}"
        echo "Pantheon Environment: ${HOSTING_ENV:-not set}"
        echo "Migration Source: ${MIGRATE_DB_SOURCE:-not set}"
        echo "Migration Environment: ${MIGRATE_DB_ENV:-not set}"
        ;;
    "wpengine")
        echo "WPEngine Site: ${HOSTING_SITE:-not set}"
        echo "WPEngine Docroot: ${DOCROOT:-not set}"
        echo "WPEngine Key: ${WPENGINE_SSH_KEY:-not set}"
        ;;
    "kinsta")
        echo "Kinsta Remote Host: ${REMOTE_HOST:-not set}"
        echo "Kinsta Remote Port: ${REMOTE_PORT:-not set}"
        echo "Kinsta Remote User: ${REMOTE_USER:-not set}"
        echo "Kinsta Remote Path: ${REMOTE_PATH:-not set}"
        ;;
    *)
        echo "(Provider-specific settings will appear after selecting a provider)"
        ;;
esac

echo "Theme Path: ${THEME:-not set}"
echo "Theme Name: ${THEMENAME:-not set}"
echo "WordPress Admin User: ${WP_ADMIN_USER:-not set}"
echo "WordPress Admin Email: ${WP_ADMIN_EMAIL:-not set}"
echo ""

# Get hosting provider
echo "üèõÔ∏è Hosting Provider Configuration:"
echo "----------------------------------"
HOST_PROVIDER=$(select_option "Select your hosting provider:" "pantheon" "wpengine" "kinsta")
echo "‚úì Selected: $HOST_PROVIDER"

# Get hosting-specific configuration
echo ""
case "$HOST_PROVIDER" in
    "pantheon")
        echo "üèõÔ∏è Pantheon Configuration:"
        echo "--------------------------"
        prompt_input "Site machine name (e.g., my-site)" "${HOSTING_SITE}" HOSTING_SITE
        prompt_input "Default environment (dev/test/live)" "${HOSTING_ENV:-dev}" HOSTING_ENV
        ;;
    "wpengine")
        echo "‚ö° WPEngine Configuration:"
        echo "-------------------------"
        prompt_input "Install name (e.g., my-site)" "${HOSTING_SITE}" HOSTING_SITE
        prompt_input "Document root directory (e.g., wp, public, web, or . for application root)" "${DOCROOT:-web}" DOCROOT
        prompt_input "SSH private key path (e.g., ~/.ssh/keyname)" "${WPENGINE_SSH_KEY:-~/.ssh/id_rsa}" WPENGINE_SSH_KEY_RAW

        # Store the path as-is (with tilde) - don't expand here
        # Let the project:auth command handle expansion at runtime
        WPENGINE_SSH_KEY="${WPENGINE_SSH_KEY_RAW%.pub}"

        echo "üí° WPEngine only allows one SSH key per account, so we'll use this specific key."
        echo "üí° SSH key path configured: $WPENGINE_SSH_KEY (will be expanded at runtime)"
        echo "üí° Document root configured: $DOCROOT"
        ;;
    "kinsta")
        echo "üî∑ Kinsta Configuration:"
        echo "-----------------------"
        prompt_input "Remote Host (e.g., 11.111.111.111)" "${REMOTE_HOST}" REMOTE_HOST
        prompt_input "Remote Port (e.g., 12345)" "${REMOTE_PORT}" REMOTE_PORT
        prompt_input "Remote User (e.g., yourusername)" "${REMOTE_USER}" REMOTE_USER
        prompt_input "Remote Path (e.g., /www/somethingsomething/public)" "${REMOTE_PATH:-public}" REMOTE_PATH
        echo "üí° Kinsta uses SSH keys for authentication."
        ;;
esac

# Get theme configuration
echo ""
echo "üé® Theme Configuration:"
echo "----------------------"
prompt_input "Theme path (e.g., wp-content/themes/custom/struts)" "${THEME}" THEME_PATH
prompt_input "Theme name/slug (e.g., mytheme or custom/themename if in a custom folder)" "${THEMENAME}" THEME_NAME

# Get WordPress admin configuration
echo ""
echo "üë§ WordPress Admin Configuration:"
echo "--------------------------------"
prompt_input "WordPress admin username" "${WP_ADMIN_USER:-admin}" WP_ADMIN_USER

# Get password securely
echo -n "WordPress admin password: "
read -s WP_ADMIN_PASS
echo ""
echo -n "Confirm password: "
read -s WP_ADMIN_PASS_CONFIRM
echo ""

if [ "$WP_ADMIN_PASS" != "$WP_ADMIN_PASS_CONFIRM" ]; then
    echo "‚ö†Ô∏è  Passwords don't match. Using default."
    WP_ADMIN_PASS="admin"
fi

prompt_input "WordPress admin email" "${WP_ADMIN_EMAIL:-admin@example.com}" WP_ADMIN_EMAIL

# Get migration settings (optional, Pantheon only)
if [[ "$HOST_PROVIDER" == "pantheon" ]]; then
    echo ""
    echo "üîÑ Migration Settings (optional):"
    echo "---------------------------------"
    prompt_input "Source site for migrations (optional)" "${MIGRATE_DB_SOURCE}" MIGRATE_SOURCE
    if [ -n "$MIGRATE_SOURCE" ]; then
        prompt_input "Source environment (dev/test/live)" "${MIGRATE_DB_ENV:-live}" MIGRATE_ENV
    fi
fi

# Function to write variable to load-config.sh and DDEV config
write_config_var() {
    local var_name="$1"
    local var_value="$2"
    local config_file=".ddev/scripts/load-config.sh"

    # Set the variable in DDEV's web environment
    ddev config --web-environment-add "${var_name}=${var_value}"

    # Escape special characters for sed
    local escaped_value=$(echo "$var_value" | sed 's/[[\.*^$()+?{|]/\\&/g')

    # Check if variable already exists as export
    if grep -q "^export $var_name=" "$config_file"; then
        # Update existing variable
        sed -i.bak "s/^export $var_name=.*/export $var_name=\"$escaped_value\"/" "$config_file"
    else
        # Add new variable before load_kanopi_config function
        sed -i.bak "/^load_kanopi_config() {/i\\
export $var_name=\"$escaped_value\"\\
" "$config_file"
    fi

    # Remove backup file
    rm -f "${config_file}.bak"
}

# Update configuration
echo ""
echo "üíæ Updating configuration in .ddev/scripts/load-config.sh and DDEV environment..."

# Write hosting provider configuration
echo "Setting hosting provider configuration..."
write_config_var "HOSTING_PROVIDER" "$HOST_PROVIDER"

case "$HOST_PROVIDER" in
    "pantheon")
        write_config_var "HOSTING_SITE" "$HOSTING_SITE"
        write_config_var "HOSTING_ENV" "$HOSTING_ENV"
        ;;
    "wpengine")
        write_config_var "HOSTING_SITE" "$HOSTING_SITE"
        write_config_var "DOCROOT" "$DOCROOT"
        write_config_var "WPENGINE_SSH_KEY" "$WPENGINE_SSH_KEY"
        ;;
    "kinsta")
        write_config_var "REMOTE_HOST" "$REMOTE_HOST"
        write_config_var "REMOTE_PORT" "$REMOTE_PORT"
        write_config_var "REMOTE_USER" "$REMOTE_USER"
        write_config_var "REMOTE_PATH" "$REMOTE_PATH"
        ;;
esac

# Write theme variables
echo "Setting theme configuration..."
write_config_var "THEME" "$THEME_PATH"
write_config_var "THEMENAME" "$THEME_NAME"

# Write WordPress admin variables
echo "Setting WordPress admin configuration..."
write_config_var "WP_ADMIN_USER" "$WP_ADMIN_USER"
write_config_var "WP_ADMIN_PASS" "$WP_ADMIN_PASS"
write_config_var "WP_ADMIN_EMAIL" "$WP_ADMIN_EMAIL"

# Write migration settings if provided (Pantheon only)
if [[ "$HOST_PROVIDER" == "pantheon" ]] && [ -n "$MIGRATE_SOURCE" ]; then
    echo "Setting migration configuration..."
    write_config_var "MIGRATE_DB_SOURCE" "$MIGRATE_SOURCE"
    write_config_var "MIGRATE_DB_ENV" "$MIGRATE_ENV"
fi


echo ""
echo -e "üéâ ${green}Configuration complete!${NC}"
echo ""
echo "üìÅ Settings saved in:"
echo "   ‚Ä¢ .ddev/scripts/load-config.sh (for command scripts)"
echo "   ‚Ä¢ .ddev/config.yaml web_environment (for DDEV containers)"
echo ""
echo -e "${yellow}Next steps:${NC}"

# Provider-specific authentication setup
case "$HOST_PROVIDER" in
    "pantheon")
        echo "1. üîë Set your Pantheon machine token globally (if not already set):"
        echo "   ddev config global --web-environment-add=TERMINUS_MACHINE_TOKEN=your_token"
        echo "   üí° Get your token: https://dashboard.pantheon.io/machine-token/create"
        echo ""
        ;;
    "wpengine")
        echo "1. üîë Ensure your SSH key is set up for WPEngine:"
        echo "   üí° Add your SSH public key to your WPEngine User Portal"
        echo "   üí° The public key should correspond to: $WPENGINE_SSH_KEY"
        echo "   üí° The init script will automatically load this specific key"
        echo ""
        ;;
    "kinsta")
        echo "1. üîë Ensure your SSH key is set up for Kinsta:"
        echo "   üí° Add your SSH public key in MyKinsta > User Settings > SSH Keys"
        echo "   üí° The init script will load all your keys"
        echo ""
        ;;
esac

echo "2. üåê Run the init script!"
echo "   ddev project:init"
echo ""
echo "3. üé® Start developing:"
echo "   ddev theme:watch"
echo ""
echo -e "${green}${divider}${NC}"
