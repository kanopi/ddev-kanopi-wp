#!/usr/bin/env bash

## Description: Interactive configuration wizard for Kanopi WordPress DDEV
## Usage: project-configure
## Example: "ddev project-configure"
## Aliases: configure,project:configure,prc

#ddev-generated

# Colors and formatting
green='\033[0;32m'
yellow='\033[1;33m'
red='\033[0;31m'
NC='\033[0m'
divider='===================================================\n'

echo -e "\n🔧 ${yellow}Kanopi WordPress DDEV Configuration Wizard${NC} 🔧"
echo -e "${green}${divider}${NC}"
echo "This tool sets up configuration variables for your hosting provider and development settings."
echo "Variables are stored in .ddev/scripts/load-config.sh"
echo "Press Ctrl+C anytime to exit."
echo ""

# Check if DDEV project exists
if [ ! -f ".ddev/config.yaml" ]; then
    echo "❌ DDEV project not found. Please run this command from your DDEV project root."
    echo "💡 If this is a new project, run 'ddev add-on get kanopi/ddev-kanopi-wp' first."
    exit 1
fi

# Check if load-config.sh exists
if [ ! -f ".ddev/scripts/load-config.sh" ]; then
    echo "❌ Kanopi WordPress add-on scripts not found."
    echo "Please run 'ddev add-on get kanopi/ddev-kanopi-wp' first"
    exit 1
fi

# Function to prompt for input with default
prompt_input() {
    local prompt="$1"
    local default="$2"
    local var_name="$3"
    
    if [ -n "$default" ]; then
        echo -n "$prompt [$default]: "
    else
        echo -n "$prompt: "
    fi
    
    read -r input
    if [ -z "$input" ] && [ -n "$default" ]; then
        input="$default"
    fi
    
    eval "$var_name='$input'"
}

# Function to select from options
select_option() {
    local prompt="$1"
    shift
    local options=("$@")
    
    printf "%s\n" "$prompt" >&2
    for i in "${!options[@]}"; do
        printf "  %d. %s\n" "$((i+1))" "${options[i]}" >&2
    done
    printf "Select option [1]: " >&2
    
    read -r choice
    choice=${choice:-1}
    
    if [[ "$choice" =~ ^[0-9]+$ ]] && [ "$choice" -ge 1 ] && [ "$choice" -le "${#options[@]}" ]; then
        echo "${options[$((choice-1))]}"
    else
        echo "${options[0]}"
    fi
}

# Load current configuration from load-config.sh
source .ddev/scripts/load-config.sh
load_kanopi_config

# Show current configuration
echo "📋 Current Configuration:"
echo "------------------------"
echo "Hosting Provider: ${HOSTING_PROVIDER:-not set}"

# Show provider-specific configuration
case "${HOSTING_PROVIDER:-not set}" in
    "pantheon")
        echo "Pantheon Site: ${HOSTING_SITE:-not set}"
        echo "Pantheon Environment: ${HOSTING_ENV:-not set}"
        echo "Migration Source: ${MIGRATE_DB_SOURCE:-not set}"
        echo "Migration Environment: ${MIGRATE_DB_ENV:-not set}"
        ;;
    "wpengine")
        echo "WPEngine Site: ${HOSTING_SITE:-not set}"
        echo "WPEngine Docroot: ${DOCROOT:-not set}"
        echo "WPEngine Key: ${WPENGINE_SSH_KEY:-not set}"
        ;;
    "kinsta")
        echo "Kinsta Remote Host: ${REMOTE_HOST:-not set}"
        echo "Kinsta Remote Port: ${REMOTE_PORT:-not set}"
        echo "Kinsta Remote User: ${REMOTE_USER:-not set}"
        echo "Kinsta Remote Path: ${REMOTE_PATH:-not set}"
        echo "Kinsta Username: ${KINSTA_USERNAME:-not set}"
        echo "Kinsta Environment: ${HOSTING_ENV:-not set}"
        ;;
    *)
        echo "(Provider-specific settings will appear after selecting a provider)"
        ;;
esac

echo "Theme Path: ${THEME:-not set}"
echo "Theme Name: ${THEMENAME:-not set}"
echo "WordPress Admin User: ${WP_ADMIN_USER:-not set}"
echo "WordPress Admin Email: ${WP_ADMIN_EMAIL:-not set}"
echo "WordPress DB Prefix: ${WP_PREFIX:-not set}"
echo "Proxy URL: ${PROXY_URL:-not set}"
echo ""

# Get hosting provider
echo "🏛️ Hosting Provider Configuration:"
echo "----------------------------------"
HOST_PROVIDER=$(select_option "Select your hosting provider:" "pantheon" "wpengine" "kinsta")
echo "✓ Selected: $HOST_PROVIDER"

# Get hosting-specific configuration
echo ""
case "$HOST_PROVIDER" in
    "pantheon")
        echo "🏛️ Pantheon Configuration:"
        echo "--------------------------"
        prompt_input "Site machine name (e.g., my-site)" "${HOSTING_SITE}" HOSTING_SITE
        prompt_input "Default environment (dev/test/live)" "${HOSTING_ENV:-dev}" HOSTING_ENV
        ;;
    "wpengine")
        echo "⚡ WPEngine Configuration:"
        echo "-------------------------"
        prompt_input "Install name (e.g., my-site)" "${HOSTING_SITE}" HOSTING_SITE
        prompt_input "Document root directory (e.g., wp, public, web, or . for application root)" "${DOCROOT:-web}" DOCROOT
        prompt_input "SSH private key path (e.g., ~/.ssh/keyname)" "${WPENGINE_SSH_KEY:-~/.ssh/id_rsa}" WPENGINE_SSH_KEY_RAW

        # Expand tilde to absolute path for DDEV environment
        WPENGINE_SSH_KEY="${WPENGINE_SSH_KEY_RAW%.pub}"
        if [[ "$WPENGINE_SSH_KEY" == "~/"* ]]; then
            WPENGINE_SSH_KEY="${HOME}${WPENGINE_SSH_KEY:1}"
        fi

        echo "💡 WPEngine only allows one SSH key per account, so we'll use this specific key."
        echo "💡 SSH key path configured: $WPENGINE_SSH_KEY"
        echo "💡 Document root configured: $DOCROOT"
        ;;
    "kinsta")
        echo "🔷 Kinsta Configuration:"
        echo "-----------------------"
        prompt_input "Remote Host (e.g., 11.111.111.111)" "${REMOTE_HOST}" REMOTE_HOST
        prompt_input "Remote Port (e.g., 12345)" "${REMOTE_PORT}" REMOTE_PORT
        prompt_input "Remote User (e.g., yourusername)" "${REMOTE_USER}" REMOTE_USER
        prompt_input "Remote Path (e.g., /www/somethingsomething/public)" "${REMOTE_PATH:-public}" REMOTE_PATH
        echo ""
        echo "🌐 Kinsta Site URL Configuration:"
        prompt_input "Kinsta Username (e.g., outandequalorg)" "${KINSTA_USERNAME}" KINSTA_USERNAME
        prompt_input "Environment name (e.g., build, staging, live)" "${HOSTING_ENV:-build}" HOSTING_ENV
        echo "💡 This creates URLs like: https://env-${KINSTA_USERNAME:-username}-${HOSTING_ENV:-build}.kinsta.cloud/"
        echo "💡 Kinsta uses SSH keys for authentication."
        ;;
esac

# Get theme configuration
echo ""
echo "🎨 Theme Configuration:"
echo "----------------------"
prompt_input "Theme path (e.g., wp-content/themes/custom/struts)" "${THEME}" THEME_PATH
prompt_input "Theme name/slug (e.g., mytheme or custom/themename if in a custom folder)" "${THEMENAME}" THEME_NAME

# Get WordPress admin configuration
echo ""
echo "👤 WordPress Admin Configuration:"
echo "--------------------------------"
prompt_input "WordPress admin username" "${WP_ADMIN_USER:-admin}" WP_ADMIN_USER

# Get password securely
echo -n "WordPress admin password: "
read -s WP_ADMIN_PASS
echo ""
echo -n "Confirm password: "
read -s WP_ADMIN_PASS_CONFIRM
echo ""

if [ "$WP_ADMIN_PASS" != "$WP_ADMIN_PASS_CONFIRM" ]; then
    echo "⚠️  Passwords don't match. Using default."
    WP_ADMIN_PASS="admin"
fi

prompt_input "WordPress admin email" "${WP_ADMIN_EMAIL:-admin@example.com}" WP_ADMIN_EMAIL

# Get WordPress database prefix
echo ""
echo "🗄️ Database Configuration:"
echo "--------------------------"
prompt_input "WordPress database table prefix" "${WP_PREFIX:-wp_}" WP_PREFIX

# Get migration settings (optional, Pantheon only)
if [[ "$HOST_PROVIDER" == "pantheon" ]]; then
    echo ""
    echo "🔄 Migration Settings (optional):"
    echo "---------------------------------"
    prompt_input "Source site for migrations (optional)" "${MIGRATE_DB_SOURCE}" MIGRATE_SOURCE
    if [ -n "$MIGRATE_SOURCE" ]; then
        prompt_input "Source environment (dev/test/live)" "${MIGRATE_DB_ENV:-live}" MIGRATE_ENV
    fi
fi

# Function to write variable to load-config.sh and DDEV config
write_config_var() {
    local var_name="$1"
    local var_value="$2"
    local config_file=".ddev/scripts/load-config.sh"

    # Set the variable in DDEV's web environment
    ddev config --web-environment-add "${var_name}=${var_value}"

    # Use a temporary file to rewrite the config file safely
    local temp_file=$(mktemp)
    local found_var=false

    # Read the original file line by line
    while IFS= read -r line || [ -n "$line" ]; do
        if [[ $line =~ ^export[[:space:]]+${var_name}= ]]; then
            # Replace existing variable
            printf 'export %s="%s"\n' "$var_name" "$var_value" >> "$temp_file"
            found_var=true
        else
            printf '%s\n' "$line" >> "$temp_file"
        fi
    done < "$config_file"

    # If variable wasn't found, add it before the load_kanopi_config function
    if [ "$found_var" = false ]; then
        local temp_file2=$(mktemp)
        local added_var=false

        while IFS= read -r line || [ -n "$line" ]; do
            if [[ $line =~ ^load_kanopi_config\(\)[[:space:]]*\{ ]] && [ "$added_var" = false ]; then
                # Add the new variable before the function
                printf 'export %s="%s"\n' "$var_name" "$var_value" >> "$temp_file2"
                printf '%s\n' "$line" >> "$temp_file2"
                added_var=true
            else
                printf '%s\n' "$line" >> "$temp_file2"
            fi
        done < "$temp_file"

        mv "$temp_file2" "$temp_file"
    fi

    # Replace the original file
    mv "$temp_file" "$config_file"
}

# Update configuration
echo ""
echo "💾 Updating configuration in .ddev/scripts/load-config.sh and DDEV environment..."

# Write hosting provider configuration
echo "Setting hosting provider configuration..."
write_config_var "HOSTING_PROVIDER" "$HOST_PROVIDER"

case "$HOST_PROVIDER" in
    "pantheon")
        write_config_var "HOSTING_SITE" "$HOSTING_SITE"
        write_config_var "HOSTING_ENV" "$HOSTING_ENV"
        ;;
    "wpengine")
        write_config_var "HOSTING_SITE" "$HOSTING_SITE"
        write_config_var "DOCROOT" "$DOCROOT"
        write_config_var "WPENGINE_SSH_KEY" "$WPENGINE_SSH_KEY"
        ;;
    "kinsta")
        write_config_var "REMOTE_HOST" "$REMOTE_HOST"
        write_config_var "REMOTE_PORT" "$REMOTE_PORT"
        write_config_var "REMOTE_USER" "$REMOTE_USER"
        write_config_var "REMOTE_PATH" "$REMOTE_PATH"
        write_config_var "KINSTA_USERNAME" "$KINSTA_USERNAME"
        write_config_var "HOSTING_ENV" "$HOSTING_ENV"
        ;;
esac

# Write theme variables
echo "Setting theme configuration..."
write_config_var "THEME" "$THEME_PATH"
write_config_var "THEMENAME" "$THEME_NAME"

# Write WordPress admin variables
echo "Setting WordPress admin configuration..."
write_config_var "WP_ADMIN_USER" "$WP_ADMIN_USER"
write_config_var "WP_ADMIN_PASS" "$WP_ADMIN_PASS"
write_config_var "WP_ADMIN_EMAIL" "$WP_ADMIN_EMAIL"

# Write database configuration
echo "Setting database configuration..."
write_config_var "WP_PREFIX" "$WP_PREFIX"

# Set proxy URL for nginx based on hosting provider
echo "Setting proxy configuration..."
case "$HOST_PROVIDER" in
    "pantheon")
        PROXY_URL="https://${HOSTING_ENV:-dev}-${HOSTING_SITE}.pantheonsite.io"
        ;;
    "wpengine")
        PROXY_URL="https://${HOSTING_SITE}.wpengine.com"
        ;;
    "kinsta")
        # Kinsta URL structure: https://env-username-environment.kinsta.cloud/
        if [ -n "$KINSTA_USERNAME" ] && [ -n "$HOSTING_ENV" ]; then
            PROXY_URL="https://env-${KINSTA_USERNAME}-${HOSTING_ENV}.kinsta.cloud"
        else
            PROXY_URL=""
        fi
        ;;
    *)
        PROXY_URL=""
        ;;
esac

if [ -n "$PROXY_URL" ]; then
    write_config_var "PROXY_URL" "$PROXY_URL"
    echo "  Proxy URL configured: $PROXY_URL"
else
    echo "  No proxy URL configured for provider: $HOST_PROVIDER"
fi

# Write migration settings if provided (Pantheon only)
if [[ "$HOST_PROVIDER" == "pantheon" ]] && [ -n "$MIGRATE_SOURCE" ]; then
    echo "Setting migration configuration..."
    write_config_var "MIGRATE_DB_SOURCE" "$MIGRATE_SOURCE"
    write_config_var "MIGRATE_DB_ENV" "$MIGRATE_ENV"
fi

# Configure wp-config-ddev.php to use custom table prefix if needed
if [ "$WP_PREFIX" != "wp_" ]; then
    echo "Configuring wp-config-ddev.php for custom table prefix..."

    # Get actual docroot from DDEV configuration
    DOCROOT=$(grep '^docroot:' .ddev/config.yaml | cut -d: -f2 | tr -d ' ' || echo "web")

    WP_CONFIG_DDEV_PATH="${DOCROOT}/wp-config-ddev.php"

    # Check if wp-config-ddev.php exists and needs table prefix configuration
    if [ -f "$WP_CONFIG_DDEV_PATH" ]; then
        if ! grep -q "getenv.*WP_PREFIX" "$WP_CONFIG_DDEV_PATH"; then
            echo "  Updating table prefix configuration in wp-config-ddev.php..."
            # Use Python for reliable text processing (avoids sed corruption issues)
            WP_CONFIG_DDEV_PATH="$WP_CONFIG_DDEV_PATH" python3 << 'EOF'
import re
import os

# Get the file path from environment
wp_config_path = os.environ.get('WP_CONFIG_DDEV_PATH')

# Read the file
with open(wp_config_path, 'r') as f:
    content = f.read()

# Replace table prefix line
content = re.sub(
    r"(\s*)\$table_prefix = 'wp_';",
    r"\1\$table_prefix = getenv('WP_PREFIX') ?: 'wp_';",
    content
)

# Remove ddev-generated lines
content = re.sub(r'.*#ddev-generated.*\n', '', content)
content = re.sub(r'.*ddev manages this file and may delete or overwrite the file unless this comment is removed.*\n', '', content)

# Fix any escaped dollar signs
content = content.replace('\\$table_prefix', '$table_prefix')

# Write back to file
with open(wp_config_path, 'w') as f:
    f.write(content)
EOF
            echo "  ✅ Table prefix configuration updated in wp-config-ddev.php and marked as user-managed"
        else
            echo "  ✅ Table prefix configuration already present in wp-config-ddev.php"
        fi
    else
        echo "  💡 wp-config-ddev.php not found - will be configured when WordPress is installed"
    fi
fi

# Configure nginx proxy if PROXY_URL is set
if [ -n "$PROXY_URL" ]; then
    echo "Configuring nginx proxy..."

    # Create nginx directory if it doesn't exist
    mkdir -p .ddev/nginx

    # Extract hostname from PROXY_URL for Host header
    PROXY_HOST=$(echo "$PROXY_URL" | sed 's|https\://||' | sed 's|http://||' | sed 's|/.*||')

    # Process nginx configuration template - use the current add-on source if available
    NGINX_MAIN_TEMPLATE=""
    NGINX_SNIPPET_TEMPLATE=""

    # Try to find the templates in various locations
    if [ -f ".ddev/addon-metadata/ddev-kanopi-wp/config/nginx/nginx-site-main.conf" ]; then
        NGINX_MAIN_TEMPLATE=".ddev/addon-metadata/ddev-kanopi-wp/config/nginx/nginx-site-main.conf"
    elif [ -f "/Users/thejimbirch/Projects/ddev-kanopi-wp/config/nginx/nginx-site-main.conf" ]; then
        NGINX_MAIN_TEMPLATE="/Users/thejimbirch/Projects/ddev-kanopi-wp/config/nginx/nginx-site-main.conf"
    fi

    if [ -f ".ddev/addon-metadata/ddev-kanopi-wp/config/nginx/nginx-site.conf" ]; then
        NGINX_SNIPPET_TEMPLATE=".ddev/addon-metadata/ddev-kanopi-wp/config/nginx/nginx-site.conf"
    elif [ -f "/Users/thejimbirch/Projects/ddev-kanopi-wp/config/nginx/nginx-site.conf" ]; then
        NGINX_SNIPPET_TEMPLATE="/Users/thejimbirch/Projects/ddev-kanopi-wp/config/nginx/nginx-site.conf"
    fi

    if [ -n "$NGINX_MAIN_TEMPLATE" ]; then
        # Get the actual docroot from DDEV configuration
        DOCROOT=$(grep '^docroot:' .ddev/config.yaml | cut -d: -f2 | tr -d ' ' || echo "web")

        # Create complete nginx configuration to override DDEV's default
        # First remove #ddev-generated marker, then do all replacements
        sed '1s/^#ddev-generated$//' "$NGINX_MAIN_TEMPLATE" | \
            sed "s|PROXY_URL_PLACEHOLDER|$PROXY_URL|g; s|HOST_PLACEHOLDER|$PROXY_HOST|g; s|/var/www/html/public|/var/www/html/$DOCROOT|g" \
            > ".ddev/nginx_full/nginx-site.conf"
        echo "  ✅ Complete nginx proxy configuration created (docroot: $DOCROOT)"
    elif [ -n "$NGINX_SNIPPET_TEMPLATE" ]; then
        # Fallback to snippet approach
        sed "s|PROXY_URL_PLACEHOLDER|$PROXY_URL|g; s|HOST_PLACEHOLDER|$PROXY_HOST|g" \
            "$NGINX_SNIPPET_TEMPLATE" > ".ddev/nginx/nginx-site.conf"
        echo "  ✅ Nginx proxy snippet created"
    else
        echo "  ⚠️  Nginx template not found - proxy configuration not updated"
    fi
fi

echo ""
echo -e "🎉 ${green}Configuration complete!${NC}"
echo ""
echo "📁 Settings saved in:"
echo "   • .ddev/scripts/load-config.sh (for command scripts)"
echo "   • .ddev/config.yaml web_environment (for DDEV containers)"
echo ""
echo -e "${yellow}Next steps:${NC}"

# Provider-specific authentication setup
case "$HOST_PROVIDER" in
    "pantheon")
        echo "1. 🔑 Set your Pantheon machine token globally (if not already set):"
        echo "   ddev config global --web-environment-add=TERMINUS_MACHINE_TOKEN=your_token"
        echo "   💡 Get your token: https://dashboard.pantheon.io/machine-token/create"
        echo ""
        ;;
    "wpengine")
        echo "1. 🔑 Ensure your SSH key is set up for WPEngine:"
        echo "   💡 Add your SSH public key to your WPEngine User Portal"
        echo "   💡 The public key should correspond to: $WPENGINE_SSH_KEY"
        echo "   💡 The init script will automatically load this specific key"
        echo ""
        ;;
    "kinsta")
        echo "1. 🔑 Ensure your SSH key is set up for Kinsta:"
        echo "   💡 Add your SSH public key in MyKinsta > User Settings > SSH Keys"
        echo "   💡 The init script will load all your keys"
        echo ""
        ;;
esac

echo "2. 🌐 Run the init script to launch the site."
echo "   ddev project-init"
echo ""
echo "3. 🎨 Start developing on the theme."
echo "   ddev theme-watch"
echo ""
echo -e "${green}${divider}${NC}"
